name: Validate JSON-LD Schemas

on:
  push:
    paths:
      - 'schemas/**/*.json'
      - 'src/components/JsonLdTemplates.js'
      - 'scripts/validate-jsonld.js'
  pull_request:
    paths:
      - 'schemas/**/*.json'
      - 'src/components/JsonLdTemplates.js'
      - 'scripts/validate-jsonld.js'
  workflow_dispatch:
    inputs:
      strict:
        description: 'Treat warnings as errors'
        required: false
        default: 'false'
        type: boolean

jobs:
  validate-schemas:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Make validation script executable
        run: chmod +x scripts/validate-jsonld.js
        
      - name: Create schemas directory if it doesn't exist
        run: mkdir -p schemas
        
      - name: Generate sample schemas for testing
        run: |
          # Create sample Hotel schema
          cat > schemas/sample-hotel.json << 'EOF'
          {
            "@context": "https://schema.org",
            "@type": "Hotel",
            "name": "Sample Hotel",
            "description": "A sample hotel for testing",
            "telephone": "+1-555-0123",
            "url": "https://example.com/hotel",
            "priceRange": "$$",
            "starRating": 4,
            "address": {
              "@type": "PostalAddress",
              "streetAddress": "123 Main St",
              "addressLocality": "Sample City",
              "addressRegion": "CA",
              "postalCode": "12345",
              "addressCountry": "US"
            },
            "image": ["https://example.com/hotel-image.jpg"],
            "amenities": ["WiFi", "Pool", "Gym"]
          }
          EOF
          
          # Create sample Restaurant schema
          cat > schemas/sample-restaurant.json << 'EOF'
          {
            "@context": "https://schema.org",
            "@type": "Restaurant",
            "name": "Sample Restaurant",
            "description": "A sample restaurant for testing",
            "telephone": "+1-555-0456",
            "url": "https://example.com/restaurant",
            "priceRange": "$$",
            "servesCuisine": "Italian",
            "address": {
              "@type": "PostalAddress",
              "streetAddress": "456 Food Ave",
              "addressLocality": "Sample City",
              "addressRegion": "CA",
              "postalCode": "12345",
              "addressCountry": "US"
            },
            "image": ["https://example.com/restaurant-image.jpg"]
          }
          EOF
          
          # Create sample Article schema
          cat > schemas/sample-article.json << 'EOF'
          {
            "@context": "https://schema.org",
            "@type": "Article",
            "headline": "Sample Article",
            "description": "A sample article for testing",
            "author": "John Doe",
            "datePublished": "2024-01-15",
            "articleBody": "This is the body of the sample article.",
            "url": "https://example.com/article",
            "publisher": "Sample Publisher",
            "publisherLogo": "https://example.com/logo.png"
          }
          EOF
          
          # Create sample FAQ schema
          cat > schemas/sample-faq.json << 'EOF'
          {
            "@context": "https://schema.org",
            "@type": "FAQPage",
            "mainEntity": [
              {
                "@type": "Question",
                "name": "What is this?",
                "acceptedAnswer": {
                  "@type": "Answer",
                  "text": "This is a sample FAQ."
                }
              },
              {
                "@type": "Question",
                "name": "How does it work?",
                "acceptedAnswer": {
                  "@type": "Answer",
                  "text": "It works by providing answers to questions."
                }
              }
            ]
          }
          EOF
          
      - name: Validate Hotel schema
        run: node scripts/validate-jsonld.js --file schemas/sample-hotel.json --type Hotel
        
      - name: Validate Restaurant schema
        run: node scripts/validate-jsonld.js --file schemas/sample-restaurant.json --type Restaurant
        
      - name: Validate Article schema
        run: node scripts/validate-jsonld.js --file schemas/sample-article.json --type Article
        
      - name: Validate FAQ schema
        run: node scripts/validate-jsonld.js --file schemas/sample-faq.json --type FAQ
        
      - name: Validate all schemas with strict mode
        if: ${{ github.event.inputs.strict == 'true' }}
        run: |
          node scripts/validate-jsonld.js --file schemas/sample-hotel.json --type Hotel --strict
          node scripts/validate-jsonld.js --file schemas/sample-restaurant.json --type Restaurant --strict
          node scripts/validate-jsonld.js --file schemas/sample-article.json --type Article --strict
          node scripts/validate-jsonld.js --file schemas/sample-faq.json --type FAQ --strict
          
      - name: Run validation tests
        run: npm test -- --testPathPattern=JsonLdTemplates
        
      - name: Upload validation results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: validation-results-${{ matrix.node-version }}
          path: |
            schemas/*.json
            test-results/
          retention-days: 7
          
  lint-schemas:
    runs-on: ubuntu-latest
    needs: validate-schemas
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Lint JSON files
        run: |
          # Check for valid JSON syntax
          for file in schemas/*.json; do
            if [ -f "$file" ]; then
              echo "Linting $file..."
              node -e "JSON.parse(require('fs').readFileSync('$file', 'utf8')); console.log('✅ $file is valid JSON')"
            fi
          done
          
      - name: Check schema structure
        run: |
          # Verify all schemas have required fields
          for file in schemas/*.json; do
            if [ -f "$file" ]; then
              echo "Checking structure of $file..."
              node -e "
                const data = JSON.parse(require('fs').readFileSync('$file', 'utf8'));
                if (!data['@context'] || !data['@type']) {
                  console.error('❌ $file missing @context or @type');
                  process.exit(1);
                }
                console.log('✅ $file has valid structure');
              "
            fi
          done
          
  security-scan:
    runs-on: ubuntu-latest
    needs: validate-schemas
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run security audit
        run: npm audit --audit-level=moderate
        
      - name: Check for sensitive data in schemas
        run: |
          # Check for potential sensitive information in schemas
          for file in schemas/*.json; do
            if [ -f "$file" ]; then
              echo "Scanning $file for sensitive data..."
              if grep -i -E "(password|secret|key|token|api)" "$file"; then
                echo "⚠️  Potential sensitive data found in $file"
              else
                echo "✅ No sensitive data detected in $file"
              fi
            fi
          done
          
  report:
    runs-on: ubuntu-latest
    needs: [validate-schemas, lint-schemas, security-scan]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Generate validation report
        run: |
          echo "# JSON-LD Schema Validation Report" > validation-report.md
          echo "" >> validation-report.md
          echo "## Summary" >> validation-report.md
          echo "- **Validation Status**: ${{ needs.validate-schemas.result }}" >> validation-report.md
          echo "- **Linting Status**: ${{ needs.lint-schemas.result }}" >> validation-report.md
          echo "- **Security Status**: ${{ needs.security-scan.result }}" >> validation-report.md
          echo "" >> validation-report.md
          echo "## Details" >> validation-report.md
          echo "See individual job results for detailed information." >> validation-report.md
          
      - name: Upload validation report
        uses: actions/upload-artifact@v4
        with:
          name: validation-report
          path: validation-report.md
          retention-days: 30

